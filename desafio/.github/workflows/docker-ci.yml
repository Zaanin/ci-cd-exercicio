name: CI/CD Docker Flask

on:
  push:
    branches: [ "desafio" ]
  pull_request:

env:
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/flask-ci-demo

jobs:
  build-test-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker Hub login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build image (no push yet)
        run: |
          docker build -t $IMAGE_NAME:${{ github.sha }} .

      - name: Run container (background)
        run: |
          docker run -d --name web -p 8000:8000 $IMAGE_NAME:${{ github.sha }}
          # espera subir
          for i in {1..20}; do
            if curl -fsS http://127.0.0.1:8000/ > /dev/null; then
              echo "App is up!"; break
            fi
            echo "Waiting app... ($i)"
            sleep 1
          done
          # falha se n√£o subiu
          curl -fsS http://127.0.0.1:8000/

      - name: Run tests inside a container
        run: |
          # usa a mesma imagem e executa pytest em um container separado
          # --network host para acessar o app rodando em 127.0.0.1 do runner
          docker run --rm \
            --network host \
            -v ${{ github.workspace }}/tests:/tests \
            $IMAGE_NAME:${{ github.sha }} \
            python -m pytest -q /tests

      - name: Stop container
        if: always()
        run: |
          docker logs web || true
          docker rm -f web || true

      - name: Extract Docker metadata (tags)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=sha

      - name: Build and Push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
